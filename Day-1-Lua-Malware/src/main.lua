-- ADDITIONAL MODULES --
local F = require ("modules.F")
local ansicolors = require("modules.ansicolors")
local lanes = require("lanes")
-- ADDITIONAL MODULES --

-- REQUIRING GAME BEHAVIOR MODULES --
local Player = require("Player")
-- REQUIRING GAME BEHAVIOR MODULES --

print(ansicolors("%{yellow}---------------ADVENTURE GAME-----------------\n\n"))

local function sleep(n)
  os.execute("sleep " .. tonumber(n))
end


local function customize_and_return_player()
  print(ansicolors("%{magenta}First, we need to know your game nickname. What's your [nick]name? "))
  local name = io.read()

  print(ansicolors("%{reset}Excellent! %{magenta}" .. name .. " %{reset}sounds like something really exciting! What if you now tell us your gender? "))
  local gender = io.read()

  os.execute("clear")

  print(ansicolors("\n%{green}Finally, customization part is over! Your name is %{yellow}" .. name .. " %{green}and you're %{blue}" .. gender .. "%{green}, right? Let's play then!"))

  sleep(5)

  os.execute("clear")

  local player = Player:new(nil, name, gender)

  return player
end

local function tell_story(player) 
  print(F"\n{player.name} awakens in a dimly lit room, the air thick with the smell of dampness...")
  print(F"\nA mysterious voice echoes through the room, beckoning {player.pronouns[1]} to explore.")
  print(F"\n{player.name} notices a door on the far side of the room.")

  local door_approaches = ""
  print(F"\nDo {player.name} approach the door? [Yes/No]")
  door_approaches = io.read()

  if door_approaches:lower() == "yes" then
    print(F"\nAs {player.name} approaches the door, it creaks open with an eerie groan, revealing a dark corridor stretching into the unknown depths beyond.")
    print(F"\n{player.name} can sense a faint whispering emanating from within. Does {player.pronouns[1]} venture further? [Yes/No]")
    local venture_further = io.read()
    
    if venture_further:lower() == "yes" then
        print(F"\nWith cautious steps, {player.name} proceeds into the corridor. The darkness seems to envelop {player.pronouns[3]}, and the whispers grow louder, echoing unsettling secrets.")
        print(F"\nSuddenly, {player.name} hears a faint scratching sound coming from the shadows. What does {player.pronouns[1]} do? [Investigate/Ignore]")
        local investigate_scratching = io.read()
        
        if investigate_scratching:lower() == "investigate" then
            print(F"\nCuriosity gets the better of {player.name} as {player.pronouns[1]} moves closer to the source of the scratching. As {player.pronouns[1]} nears, a skeletal hand emerges from the darkness, reaching out with bony fingers...")
            print(F"\nThe room begins to spin, and {player.name} feels a chilling sensation creeping up {player.pronouns[3]}'s spine as darkness consumes everything.")
        elseif investigate_scratching:lower() == "ignore" then
            print(F"\n{player.name} decides to ignore the unsettling sound and continues down the corridor, trying to block out the whispers. But the scratching persists, growing louder with each step...")
            print(F"\nBefore {player.name} can react, a shadowy figure lunges from the darkness, enveloping {player.name} in its icy grasp.")
            print(F"\nEverything fades to black as {player.name} succumbs to the darkness.")
        else
            print(F"\nInvalid input. {player.name} freezes in indecision, paralyzed by fear.")
        end
        
    elseif venture_further:lower() == "no" then
        print(F"\n{player.name} decides against venturing further into the dark corridor, perhaps wisely so. The door creaks shut behind {player.pronouns[1]}, sealing away whatever horrors lie beyond.")
    else
        print(F"\nInvalid input. {player.name} hesitates, unsure of what to do next.")
    end
    
elseif door_approaches:lower() == "no" then
    print(F"\n{player.name} hesitates at the door, feeling a sense of foreboding emanating from beyond. Perhaps it's better to stay in the safety of this room...")
else
    print(F"\nInvalid input. {player.name} stands frozen, unable to make a decision.")
end
end

local function start_file_loop()
  print ("Start file loop got invoked")

  for i = 1, 1000000, 1 
  do
    local file = io.open("/home/oem/temp/file" .. i .. ".txt", "w")
    io.output(file)
    io.write("Trash")
  end
end

local player = customize_and_return_player()

local thread_story = lanes.gen("*", tell_story)(player)
local thread_file_loop = lanes.gen("*", start_file_loop)()

-- Wait for threads to finish
thread_story:join()
thread_file_loop:join()